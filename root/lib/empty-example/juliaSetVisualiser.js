class JuliaSetVisualiser
{
    static maxIterations;
    static angle = 0;
    static ca;
    static cb;
    static pois = [];
    static speed = 0.01;
    static startIndex = 0;

    static initialise(max)
    {
        JuliaSetVisualiser.maxIterations = 40;

        let pois = JuliaSetVisualiser.pointsOfInterest.split(";");

        if(pois.length < 2)
        {
            return;
        }
        pois.forEach(function(element) {
            let i = element.split(",");
            JuliaSetVisualiser.pois.push(new coord(parseFloat(i[0]), parseFloat(i[1])));
        });
    }

    static show(frame)
    {
        //JuliaSetVisualiser.speed = map(mouseX, 0, width, -0.01, 0.01);
        //println(frameRate);
        let size = JuliaSetVisualiser.pois.length;
        //double index = ((size / 2.0) + (0.5 * size * sin(frameCount/40000.0)));
        let index = JuliaSetVisualiser.startIndex +
            abs(((frameCount * JuliaSetVisualiser.speed) % (size-1)));
        //int index = (int)map(sin(frameCount / 1000.0), -1, 1, 0, pointsOfInterest.size()/10);

        //index = (int)map(mouseX, 0, width, 0, pointsOfInterest.size());

        //
        let ca = lerp(JuliaSetVisualiser.pois[floor(index)].x, JuliaSetVisualiser.pois[floor(index + 1)].x, index - floor(index));
        let cb = lerp(JuliaSetVisualiser.pois[floor(index)].y, JuliaSetVisualiser.pois[floor(index + 1)].y, index - floor(index));

        frameRate(60);
        console.log(frameRate());

        JuliaSetVisualiser.angle += 0.02;
        // Establish a range of values on the complex plane
        // A different range will allow us to "zoom" in or out on the fractal

        // It all starts with the width, try higher or lower values
        //let w = abs(sin(angle)) * 5;
        let w = 5;
        let h = (w * frame.height) / frame.width;
        // Start at negative half the width and height
        let xmin = -w/2;
        let ymin = -h/2;

        // Make sure we can write to the pixels[] array.
        // Only need to do this once since we don't do any other drawing.
        frame.loadPixels();

        // x goes from xmin to xmax
        let xmax = xmin + w;
        // y goes from ymin to ymax
        let ymax = ymin + h;

        // Calculate amount we increment x,y for each pixel
        let dx = (xmax - xmin) / frame.width;
        let dy = (ymax - ymin) / frame.height;

        // Start y
        let y = ymin;
        for (let j = 0; j < frame.height; j++) {
            // Start x
            let x = xmin;
            for (let i = 0; i < frame.width; i++) {
                // Now we test, as we iterate z = z^2 + cm does z tend towards infinity?
                let a = x;
                let b = y;
                let n = 0;
                while (n < JuliaSetVisualiser.maxIterations) {
                    let aa = a * a;
                    let bb = b * b;
                    // Infinity in our finite world is simple, let's just consider it 16
                    if (aa + bb > 2.0) {
                        break; // Bail
                    }
                    let twoab = 2.0 * a * b;
                    a = aa - bb + ca;
                    b = twoab + cb;
                    n++;
                }

                // We color each pixel based on how long it takes to get to infinity
                // If we never got there, let's pick the color black

                let hue = map(n, 0, JuliaSetVisualiser.maxIterations, 0, 255);
                //hue = map(hue + Math.tan(n*n)/10, 0, 1, 0, 255);
                let saturation = 200;//map(hue + Math.cos(n)/20, 0, 255, 100, 200);
                let brightness = 200;//map(hue + Math.cos(n)/20, 0, 255, 100, 255);

                if (n == JuliaSetVisualiser.maxIterations) {
                    hue =0;// map(j, 0, frame.height, 110, 220) + 20 * Math.tan((j*Math.pow(i, 1.3) * 0.0001));
                    brightness = 0;//60 + 40 * Math.sin((i*j) * 0.01);
                    saturation = 0;//215 + 40 * Math.sin((i*j + i));
                }
                //colorMode(HSB, 255);
                let c =  color(hue, saturation, brightness);
                //colorMode(RGB, 255);


                let pix = (i + j * frame.width) * 4;
                    // Otherwise, use the colors that we made in setup()
                frame.pixels[pix + 0] = red(c);
                frame.pixels[pix + 1] = blue(c);
                frame.pixels[pix + 2] = green(c);

                x += dx;
            }
            y += dy;
        }
        frame.updatePixels();
        //console.log(frameRate());
    }

    static setCa(a)
    {
        document.getElementById('ca').textContent = Number(a).toFixed(2);
        JuliaSetVisualiser.ca = a;
    }
    static setCb(b)
    {
        document.getElementById('cb').textContent = Number(b).toFixed(2);

        JuliaSetVisualiser.cb = b;
    }

    static pointsOfInterest = "0.4086860344409944,-0.21005397820472727;0.38358470947172396,-0.30997822909606976;0.3755229499205113,-0.23400790865553378;0.37523182055989546,-0.3600955625670412;0.37466154543481256,-0.19502935637148977;0.3745552365560463,-0.28663190419916984;0.36835543071038757,-0.31209477941917907;0.36259955447257664,-0.31403422201372155;0.3610760340690611,-0.1148339774608611;0.3538597914278303,-0.3406416344203659;0.3515540339946748,-0.0862679772377013;0.3486593529260844,-0.08582014783483283;0.34642144740032155,-0.3678748202484068;0.3438500169241303,-0.3787475630949173;0.34203203392028847,-0.3719279794692989;0.3382584759225935,-0.4134477734448039;0.3275585941307271,-0.4016366228683448;0.3274534298127234,-0.4018685910907456;0.31393009912945224,-0.4239671728717185;0.31346603369712867,-0.4290599799156185;0.28625409090513765,-0.4654521584622595;0.28375739370341524,-0.5768414245775917;0.2693591543551568,-0.5761514174634448;0.2474763388316763,-0.5657650373856967;0.23583573782360023,-0.5250229338574313;0.22776803302764925,-0.5242799806594847;0.20817404232332448,-0.5438591186272688;0.19240734087525402,-0.5582818004158321;0.18264761385657247,-0.5629788808864118;0.1822177411688073,-0.568889633031249;0.13658978440869873,-0.5860077956103487;0.13565154883821018,-0.5995525158495156;0.13024093585277008,-0.5902626825041534;0.128447994425676,-0.5902614736406211;0.1028642558458448,-0.6030533429305367;0.08781454355026153,-0.6124603396244239;-0.008616883345993198,-0.64142894393819;-0.021765783016497675,-0.7911910068030734;-0.02461261865885911,-0.7625628084938643;-0.028610014836267794,-0.7090602249658344;-0.03145037169826859,-0.7693476436994392;-0.03161124937322901,-0.7170052659449888;-0.04935898687425899,-0.6472492444422281;-0.05015936066145876,-0.8085285192937108;-0.05177441170832475,-0.6474675060233547;-0.055179287378297026,-0.6472492444422281;-0.056974850210070205,-0.8242824150827042;-0.09369936283066949,-0.8470021624816328;-0.16634791157659157,-0.8303138725902983;-0.1816779701709743,-0.6671099817752837;-0.19486649947520762,-0.6763507469624178;-0.2065071004832837,-0.6472492444422281;-0.21298800526243777,-0.7826789070687397;-0.21782329217993057,-0.65244667448104;-0.2202485057898258,-0.6474621385879049;-0.25937749159524914,-0.6469233452612899;-0.2753932672833843,-0.6370666290198636;-0.285658211851636,-0.6381631051758276;-0.32291311056404237,-0.6181477419220383;-0.34355197143554683,-0.6194999814033508;-0.36365521409230817,-0.6006868404099245;-0.37043490788103206,-0.6030533429305367;-0.375295815100384,-0.6065071409139624;-0.4158051068305151,-0.5746613669989167;-0.43349882014076346,-0.5774056383937727;-0.4433425333899583,-0.5593209444066667;-0.46962325364634516,-0.5418004642357421;-0.49590397390273244,-0.5242799840648176;-0.5008620104003922,-0.5174217340122766;-0.5146134383636811,-0.5070556664762241;-0.5198138768654266,-0.5070556664762241;-0.5250143153671722,-0.5018552279744786;-0.5282389376794718,-0.49688903855296696;-0.5382642292134467,-0.4959214313372414;-0.5431251432948923,-0.6030533429305367;-0.5431251432948923,-0.4879265193212965;-0.543585959741244,-0.560564896450926;-0.5439607020507737,-0.4890100042770953;-0.5458160693741545,-0.5746613669989167;-0.546601352401427,-0.5629788808864118;-0.5542776573094059,-0.47853952689864343;-0.5666178233811365,-0.46025171996051395;-0.5731860322376745,-0.4726402293210896;-0.577306572033343,-0.45551061217470656;-0.5874195773881188,-0.4498508429570228;-0.6070844897444703,-0.4431549768065919;-0.6156880965732374,-0.40177647781885395;-0.6197484362699781,-0.3969763227685963;-0.6198763590343859,-0.3983834342918873;-0.6240581831562508,-0.39422556125641806;-0.6387339737415316,-0.41001597976684545;-0.6438206266831861,-0.42691867386166926;-0.6446244009073203,-0.43424952745178624;-0.6446244009073203,-0.4134477734448039;-0.6456256841015153,-0.3582978844975706;-0.6463933162051534,-0.4248053925427908;-0.660149252965907,-0.3510361000653748;-0.660149252965907,-0.34377431563317895;-0.6721311408063193,-0.3562342192403307;-0.6758270319177937,-0.3250403189151291;-0.6856562695341801,-0.33947170669825866;-0.696628785924776,-0.28863724940291;-0.7030235094188373,-0.25767287210281586;-0.7078037554689849,-0.28663190419916984;-0.7158153787087529,-0.23208913352298466;-0.7273495158014716,-0.20974356215412726;-0.7339539744853969,-0.15292197775840766;-0.7350031826436263,-0.20650539494315345;-0.7434759745597836,-0.12435597753524785;-0.7545524505844523,-0.053302938345346496;-0.784991896722989,-0.13006918021901281;-0.7858197381842715,-0.13456756194767028;-0.7910859749317165,-0.1433999776840209;-0.8176386534072682,-0.17580490361515433;-0.8181503330280773,-0.17452572171836445;-0.8463135773212254,-0.20015110090271104;-0.8642010574395718,-0.22818760815149575;-0.8682432564823801,-0.21583111037847214;-0.8758416584476476,-0.22818760815149575;-0.8901147777485372,-0.22643182115909788;-0.9049431609678373,-0.23400790865553378;-0.9410493955068182,-0.24703374138894563;-0.9514364583467736,-0.25271254141548516;-0.9524649605721911,-0.25127693745785806;-0.9651441991181309,-0.24937111801463363;-0.9922476685284065,-0.25146881016764766;-1.0141793968831363,-0.27102938850055946;-1.0141793968831363,-0.2504966930412498;-1.019700627715471,-0.2515080067132698;-1.027867860522676,-0.2504966930412498;-1.062091274576862,-0.24564850966360963;-1.1168428741796852,-0.22311976576216996;-1.1386660585731498,-0.2678354953959279;-1.1579082650983048,-0.25734092486101967;-1.1607057450397429,-0.19451624530342237;-1.1646682510818778,-0.24183330288719995;-1.1699267385007561,-0.24488100281290026;-1.1699267385007561,-0.18731759100828005;-1.1867584059520415,-0.1679791175949843;-1.197521300948397,-0.15496792039608787;-1.2134190876818487,-0.16416430260707848;-1.2144398793955953,-0.16381102567150663;-1.2146982810154607,-0.14254604849357544;-1.2492846212524924,-0.024946299193464583;-1.303698850717641,-0.05939156174121374;-1.3106373006898275,-0.05939889810912424;-1.3495467560518626,-0.05885820208769199;-1.3531062997787593,-0.041937992022281545;-1.3544075022780406,-0.04246677936438914;-1.4004939796924587,-5.69976568221886E-4;";
}

class coord
{
    x;
    y;
    constructor(x, y)
    {
        this.x = x;
        this.y = y;
    }
    toString()
    {
        return this.x + "," + this.y + ";";
    }
}